<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><!--! Font Awesome Pro 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M447.5 221.1c-4.5-10.7-10.5-20.6-17.9-29.3c21.6-2 40.7-14.9 50.2-22.8l0-.1c.1-.1 .2-.4 .2-.9c0-.4-.1-.7-.1-.8C469.7 159.1 446.4 144 416 144c-14.7 0-22.9 1.8-26.9 3.2c-1.6 .6-2.6 1-2.9 1.2c-6.3 5.2-15.6 4.8-21.4-1.1s-6.2-15.2-1.1-21.4c.2-.4 .7-1.3 1.2-2.9c1.3-4 3.2-12.2 3.2-26.9c0-30.4-15.1-53.7-23.2-63.9c-.1 0-.4-.1-.8-.1c-.5 0-.8 .1-.9 .2l-.1 0c-7.9 9.6-20.8 28.6-22.8 50.2C311.5 75 301.7 69 290.9 64.5c6.1-24.5 20-43.7 27.4-52.7C325 3.7 334.8 0 344 0s19.1 3.7 25.8 12.1C379.8 24.8 400 55.1 400 96c0 6.3-.3 11.9-.8 16.8c4.9-.5 10.5-.8 16.8-.8c40.9 0 71.2 20.2 83.9 30.2c8.4 6.7 12.1 16.5 12.1 25.8c0 9.2-3.7 19-11.8 25.7c-9 7.4-28.2 21.3-52.7 27.4zM320 456c-18.4 0-35.2-6.9-47.9-18.2c-12.4 25-38.3 42.2-68.1 42.2c-19 0-36.3-7-49.6-18.4C142.6 491.1 113.7 512 80 512c-44.2 0-80-35.8-80-80c0-33.7 20.9-62.6 50.4-74.4C39 344.3 32 327 32 308c0-29.8 17.2-55.7 42.2-68.1C62.9 227.2 56 210.4 56 192c0-39.8 32.2-72 72-72c17.6 0 33.8 6.3 46.3 16.9C186.4 108.1 214.9 88 248 88c44.2 0 80 35.8 80 80c0 6.2-.7 12.2-2 18c5.8-1.3 11.8-2 18-2c44.2 0 80 35.8 80 80c0 33.1-20.1 61.6-48.9 73.7C385.7 350.2 392 366.4 392 384c0 39.8-32.2 72-72 72zM296 168a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM128 232a40 40 0 1 0 0-80 40 40 0 1 0 0 80zm144 56a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM108 352a44 44 0 1 0 0-88 44 44 0 1 0 0 88zM80 480a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm124-32a44 44 0 1 0 0-88 44 44 0 1 0 0 88zm156-64a40 40 0 1 0 -80 0 40 40 0 1 0 80 0zm-16-72a48 48 0 1 0 0-96 48 48 0 1 0 0 96z"/></svg>